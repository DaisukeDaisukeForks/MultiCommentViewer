using Mcv.NicoSitePlugin.InternalMessage;
using System.Diagnostics;
using System.Text;

namespace Mcv.NicoSitePluginTests;

[TestFixture]
public class ProtobufParserTests
{
    [Test]
    public void ParseVarintTest()
    {
        var data = new byte[] { 0xc8, 0x01 };
        var (val, len) = ProtobufParser.ReadAsVarint(data);
        Assert.That(val, Is.EqualTo(200));
        Assert.That(len, Is.EqualTo(2));
    }
    [Test]
    public void ParseTest()
    {
        var data = new byte[] { 0x08, 0xc8, 0x01 };
        var fields = ProtobufParser.Parse(data);
        Assert.That(fields.Count, Is.EqualTo(1));
        Assert.That(fields[0].No, Is.EqualTo(1));
        Assert.That(fields[0].Value, Is.InstanceOf<Varint>());
        Assert.That(((Varint)fields[0].Value).Value, Is.EqualTo(200));
    }
    [Test]
    public void ParseStringTest()
    {
        var data = new byte[] { 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67 };
        var fields = ProtobufParser.Parse(data);
        Assert.That(fields.Count, Is.EqualTo(1));
        Assert.That(fields[0].No, Is.EqualTo(2));
        Assert.That(fields[0].Value, Is.InstanceOf<LengthDelimited>());
        Assert.That(((LengthDelimited)fields[0].Value).Bytes, Is.EqualTo(new byte[] { 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67 }));
    }
    [Test]
    public void CreateChunkedEntryTest()
    {
        var data = new byte[] { 0xA6, 0x02, 0x12, 0xA3, 0x02, 0x0A, 0x06, 0x08, 0xCB, 0xA7, 0xA2, 0xB6, 0x06, 0x12, 0x8D, 0x01, 0x0A, 0x8A, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x62, 0x61, 0x63, 0x6B, 0x77, 0x61, 0x72, 0x64, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x78, 0x52, 0x6F, 0x5F, 0x6F, 0x33, 0x36, 0x58, 0x51, 0x4E, 0x5F, 0x72, 0x6C, 0x53, 0x4C, 0x6F, 0x6B, 0x34, 0x6D, 0x6E, 0x67, 0x58, 0x6B, 0x74, 0x4B, 0x62, 0x59, 0x76, 0x52, 0x75, 0x63, 0x33, 0x66, 0x43, 0x4F, 0x74, 0x4C, 0x34, 0x4A, 0x62, 0x6B, 0x6A, 0x41, 0x62, 0x51, 0x6F, 0x73, 0x2D, 0x43, 0x63, 0x42, 0x43, 0x32, 0x51, 0x6B, 0x4C, 0x32, 0x58, 0x36, 0x43, 0x4E, 0x45, 0x71, 0x69, 0x31, 0x32, 0x6B, 0x6D, 0x34, 0x42, 0x70, 0x65, 0x68, 0x72, 0x49, 0x46, 0x5F, 0x46, 0x6C, 0x4C, 0x48, 0x30, 0x73, 0x4F, 0x50, 0x71, 0x7A, 0x39, 0x59, 0x1A, 0x88, 0x01, 0x0A, 0x85, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x6E, 0x61, 0x70, 0x73, 0x68, 0x6F, 0x74, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x77, 0x47, 0x7A, 0x77, 0x65, 0x79, 0x7A, 0x45, 0x65, 0x43, 0x4F, 0x6C, 0x42, 0x73, 0x6E, 0x4E, 0x39, 0x57, 0x63, 0x6F, 0x45, 0x36, 0x41, 0x5A, 0x75, 0x5F, 0x43, 0x54, 0x77, 0x37, 0x4B, 0x34, 0x55, 0x75, 0x39, 0x4F, 0x56, 0x62, 0x49, 0x5A, 0x37, 0x63, 0x55, 0x34, 0x59, 0x65, 0x4D, 0x30, 0x6A, 0x71, 0x51, 0x62, 0x55, 0x54, 0x6F, 0x7A, 0x33, 0x62, 0x73, 0x79, 0x37, 0x6B, 0x56, 0x6D, 0x52, 0x77, 0x31, 0x44, 0x35, 0x49, 0x6B, 0x5A, 0x70, 0x54, 0x4B, 0x33, 0x33, 0x77, 0x4D, 0x4E, 0x6D, 0x36, 0x7A, 0x51, 0x9C, 0x01, 0x1A, 0x99, 0x01, 0x0A, 0x06, 0x08, 0xCB, 0xA7, 0xA2, 0xB6, 0x06, 0x12, 0x06, 0x08, 0xDB, 0xA7, 0xA2, 0xB6, 0x06, 0x1A, 0x86, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x79, 0x76, 0x44, 0x6D, 0x5F, 0x45, 0x4D, 0x58, 0x64, 0x50, 0x36, 0x4C, 0x47, 0x41, 0x46, 0x39, 0x4E, 0x4D, 0x6C, 0x6A, 0x39, 0x66, 0x33, 0x74, 0x63, 0x74, 0x6D, 0x6F, 0x44, 0x4F, 0x6F, 0x4C, 0x6C, 0x75, 0x41, 0x52, 0x4D, 0x39, 0x49, 0x36, 0x4D, 0x32, 0x64, 0x73, 0x45, 0x36, 0x61, 0x6A, 0x6D, 0x69, 0x7A, 0x34, 0x37, 0x67, 0x46, 0x66, 0x71, 0x62, 0x74, 0x6F, 0x32, 0x45, 0x51, 0x65, 0x47, 0x6A, 0x38, 0x6E, 0x58, 0x6C, 0x49, 0x73, 0x37, 0x31, 0x65, 0x70, 0x49, 0x4F, 0x4E, 0x72, 0x73, 0x71, 0x52, 0x49, 0x52, 0x2D, 0x9C, 0x01, 0x1A, 0x99, 0x01, 0x0A, 0x06, 0x08, 0xDB, 0xA7, 0xA2, 0xB6, 0x06, 0x12, 0x06, 0x08, 0xEB, 0xA7, 0xA2, 0xB6, 0x06, 0x1A, 0x86, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x7A, 0x51, 0x6D, 0x77, 0x32, 0x6F, 0x71, 0x4B, 0x50, 0x4C, 0x6A, 0x48, 0x4E, 0x6E, 0x79, 0x41, 0x7A, 0x51, 0x69, 0x32, 0x45, 0x6A, 0x55, 0x6B, 0x44, 0x4A, 0x49, 0x78, 0x70, 0x34, 0x2D, 0x5A, 0x67, 0x44, 0x79, 0x56, 0x50, 0x4B, 0x49, 0x79, 0x4A, 0x2D, 0x31, 0x75, 0x74, 0x38, 0x2D, 0x64, 0x65, 0x38, 0x68, 0x36, 0x44, 0x35, 0x34, 0x74, 0x59, 0x74, 0x32, 0x71, 0x4C, 0x6A, 0x32, 0x62, 0x50, 0x32, 0x79, 0x30, 0x6C, 0x6C, 0x77, 0x78, 0x4A, 0x49, 0x7A, 0x47, 0x57, 0x72, 0x6B, 0x4A, 0x49, 0x32, 0x79, 0x4B, 0x62, 0x7A, 0x9C, 0x01, 0x0A, 0x99, 0x01, 0x0A, 0x06, 0x08, 0xEB, 0xA7, 0xA2, 0xB6, 0x06, 0x12, 0x06, 0x08, 0xFB, 0xA7, 0xA2, 0xB6, 0x06, 0x1A, 0x86, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x7A, 0x55, 0x50, 0x32, 0x4B, 0x78, 0x4E, 0x57, 0x6C, 0x68, 0x32, 0x41, 0x34, 0x58, 0x43, 0x37, 0x62, 0x51, 0x6B, 0x54, 0x6D, 0x45, 0x78, 0x59, 0x6D, 0x31, 0x59, 0x77, 0x43, 0x6F, 0x63, 0x77, 0x64, 0x37, 0x70, 0x33, 0x61, 0x57, 0x49, 0x77, 0x62, 0x79, 0x7A, 0x38, 0x6E, 0x6C, 0x32, 0x70, 0x56, 0x6D, 0x79, 0x67, 0x71, 0x5A, 0x4E, 0x46, 0x63, 0x48, 0x4F, 0x6C, 0x68, 0x4F, 0x5F, 0x79, 0x39, 0x4E, 0x30, 0x41, 0x6E, 0x52, 0x49, 0x68, 0x63, 0x76, 0x4D, 0x35, 0x41, 0x72, 0x30, 0x38, 0x7A, 0x33, 0x53, 0x79, 0x69, 0x37, 0x9C, 0x01, 0x0A, 0x99, 0x01, 0x0A, 0x06, 0x08, 0xFB, 0xA7, 0xA2, 0xB6, 0x06, 0x12, 0x06, 0x08, 0x8B, 0xA8, 0xA2, 0xB6, 0x06, 0x1A, 0x86, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6D, 0x70, 0x6E, 0x2E, 0x6C, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x2F, 0x76, 0x34, 0x2F, 0x42, 0x42, 0x7A, 0x33, 0x4E, 0x6F, 0x46, 0x35, 0x77, 0x65, 0x6D, 0x72, 0x5F, 0x69, 0x38, 0x56, 0x2D, 0x73, 0x5A, 0x67, 0x32, 0x47, 0x33, 0x47, 0x45, 0x64, 0x49, 0x32, 0x52, 0x37, 0x46, 0x6D, 0x66, 0x5F, 0x64, 0x76, 0x5F, 0x6A, 0x77, 0x72, 0x49, 0x33, 0x75, 0x6D, 0x63, 0x72, 0x75, 0x62, 0x4C, 0x38, 0x37, 0x57, 0x50, 0x74, 0x52, 0x51, 0x44, 0x45, 0x5A, 0x6C, 0x53, 0x5A, 0x42, 0x44, 0x7A, 0x71, 0x72, 0x30, 0x65, 0x33, 0x56, 0x71, 0x32, 0x76, 0x61, 0x55, 0x4B, 0x46, 0x6C, 0x51, 0x33, 0x58, 0x6B, 0x69, 0x57, 0x45, 0x43, 0x42, 0x08, 0x22, 0x06, 0x08, 0x8B, 0xA8, 0xA2, 0xB6, 0x06 };
        var a = ChunkedEntry.Create(data);

    }
    [Test]
    public void CreateHeaderTest()
    {
        var header = ProtobufParser.CreateHeader(1, 0);
        Assert.That(header, Is.EqualTo(new byte[] { 0x08 }));
    }
    [Test]
    public void ParseMultiData()
    {
        var data = new byte[] { 0x12, 0x01, 0x61, 0x08, 0xc8, 0x01 };
        var fields = ProtobufParser.Parse(data);

        Assert.That(fields[0].No, Is.EqualTo(2));
        Assert.That(fields[0].Value, Is.InstanceOf<LengthDelimited>());
        Assert.That(((LengthDelimited)fields[0].Value).Bytes, Is.EqualTo(new byte[] { 0x61 }));

        Assert.That(fields[1].No, Is.EqualTo(1));
        Assert.That(fields[1].Value, Is.InstanceOf<Varint>());
        Assert.That(((Varint)fields[1].Value).Value, Is.EqualTo(200));
    }
    [Test]
    public void ParseBackwardSegmentTest()
    {
        var data = new byte[] { 0xa, 0x6, 0x8, 0x86, 0xc3, 0x8b, 0xb6, 0x6, 0x12, 0x8d, 0x1, 0xa, 0x8a, 0x1, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6d, 0x70, 0x6e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x6a, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x34, 0x2f, 0x42, 0x42, 0x7a, 0x5f, 0x5a, 0x48, 0x52, 0x62, 0x33, 0x64, 0x50, 0x58, 0x61, 0x41, 0x4e, 0x68, 0x6a, 0x69, 0x34, 0x61, 0x71, 0x4e, 0x73, 0x61, 0x70, 0x51, 0x53, 0x73, 0x57, 0x78, 0x6c, 0x4d, 0x72, 0x58, 0x30, 0x70, 0x51, 0x56, 0x6f, 0x59, 0x4a, 0x66, 0x52, 0x39, 0x62, 0x76, 0x70, 0x32, 0x76, 0x4a, 0x4f, 0x48, 0x35, 0x71, 0x75, 0x61, 0x6a, 0x70, 0x77, 0x34, 0x52, 0x30, 0x59, 0x50, 0x70, 0x36, 0x50, 0x56, 0x65, 0x66, 0x71, 0x35, 0x55, 0x31, 0x33, 0x32, 0x63, 0x50, 0x71, 0x76, 0x30, 0x55, 0x65, 0x6d, 0x51, 0x75, 0x44, 0x61, 0x4a, 0x63, 0x6b, 0x1a, 0x88, 0x1, 0xa, 0x85, 0x1, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6d, 0x70, 0x6e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x6a, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x76, 0x34, 0x2f, 0x42, 0x42, 0x7a, 0x38, 0x4f, 0x65, 0x68, 0x4f, 0x50, 0x57, 0x37, 0x56, 0x70, 0x66, 0x77, 0x32, 0x4e, 0x58, 0x65, 0x6a, 0x44, 0x72, 0x64, 0x66, 0x52, 0x43, 0x65, 0x32, 0x6a, 0x75, 0x42, 0x61, 0x76, 0x75, 0x50, 0x44, 0x4d, 0x75, 0x42, 0x54, 0x49, 0x66, 0x64, 0x4b, 0x55, 0x41, 0x45, 0x4b, 0x4b, 0x35, 0x65, 0x4b, 0x34, 0x43, 0x39, 0x31, 0x70, 0x4d, 0x57, 0x75, 0x49, 0x6a, 0x48, 0x35, 0x4f, 0x6a, 0x4d, 0x76, 0x51, 0x76, 0x54, 0x6a, 0x70, 0x4e, 0x35, 0x68, 0x63, 0x58, 0x6d, 0x6e, 0x74, 0x4f, 0x6e, 0x70, 0x61, 0x77 };
        var bs = BackwardSegment.Create(data);
        Assert.That(bs.Until, Is.EqualTo(1724047750));
        Assert.That(bs.Segment, Is.EqualTo("https://mpn.live.nicovideo.jp/data/backward/v4/BBz_ZHRb3dPXaANhji4aqNsapQSsWxlMrX0pQVoYJfR9bvp2vJOH5quajpw4R0YPp6PVefq5U132cPqv0UemQuDaJck"));
        Assert.That(bs.Snapshot, Is.EqualTo("https://mpn.live.nicovideo.jp/data/snapshot/v4/BBz8OehOPW7Vpfw2NXejDrdfRCe2juBavuPDMuBTIfdKUAEKK5eK4C91pMWuIjH5OjMvQvTjpN5hcXmntOnpaw"));
    }
    [Test]
    public void ParseAbcTest()
    {
        var data = new byte[] { 0xa, 0x6, 0x8, 0x86, 0xc3, 0x8b, 0xb6, 0x6, 0x12, 0x6, 0x8, 0x96, 0xc3, 0x8b, 0xb6, 0x6, 0x1a, 0x86, 0x1, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6d, 0x70, 0x6e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x6a, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34, 0x2f, 0x42, 0x42, 0x7a, 0x31, 0x6d, 0x4a, 0x4c, 0x46, 0x57, 0x6a, 0x47, 0x67, 0x70, 0x6b, 0x68, 0x64, 0x76, 0x6d, 0x2d, 0x46, 0x6b, 0x79, 0x4d, 0x76, 0x59, 0x6c, 0x49, 0x59, 0x48, 0x6b, 0x35, 0x45, 0x46, 0x6d, 0x6f, 0x47, 0x41, 0x55, 0x4e, 0x5a, 0x49, 0x77, 0x68, 0x31, 0x32, 0x50, 0x4b, 0x58, 0x4b, 0x5f, 0x46, 0x33, 0x6b, 0x44, 0x37, 0x46, 0x38, 0x45, 0x30, 0x4f, 0x4d, 0x52, 0x6b, 0x52, 0x70, 0x43, 0x6a, 0x6d, 0x68, 0x56, 0x63, 0x68, 0x6d, 0x4d, 0x4d, 0x78, 0x48, 0x64, 0x36, 0x73, 0x65, 0x73, 0x48, 0x43, 0x6d, 0x50, 0x65, 0x4b };
        var bs = MessageSegment.Create(data);
        Assert.That(bs.From, Is.EqualTo(1724047750));
        Assert.That(bs.Until, Is.EqualTo(1724047766));
        Assert.That(bs.Uri, Is.EqualTo("https://mpn.live.nicovideo.jp/data/segment/v4/BBz1mJLFWjGgpkhdvm-FkyMvYlIYHk5EFmoGAUNZIwh12PKXK_F3kD7F8E0OMRkRpCjmhVchmMMxHd6sesHCmPeK"));
    }
    [Test]
    public void ParsePrevious()
    {
        var data = new byte[] { 0x6B, 0x0A, 0x3E, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6D, 0x53, 0x64, 0x6C, 0x68, 0x38, 0x34, 0x4A, 0x47, 0x52, 0x41, 0x52, 0x47, 0x61, 0x4F, 0x6D, 0x34, 0x4C, 0x56, 0x6E, 0x38, 0x7A, 0x75, 0x78, 0x44, 0x32, 0x79, 0x4E, 0x51, 0x52, 0x12, 0x0C, 0x08, 0xCD, 0x8F, 0xB5, 0xB6, 0x06, 0x10, 0x98, 0xD3, 0xFE, 0xB2, 0x03, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xC3, 0xF0, 0xE8, 0xA4, 0x01, 0x12, 0x29, 0x0A, 0x27, 0x0A, 0x09, 0xE3, 0x82, 0x8F, 0xE3, 0x81, 0x8B, 0xE3, 0x82, 0x8B, 0x18, 0xEB, 0x97, 0x16, 0x32, 0x12, 0x61, 0x3A, 0x6D, 0x5F, 0x76, 0x32, 0x55, 0x6C, 0x48, 0x74, 0x52, 0x38, 0x30, 0x6F, 0x76, 0x77, 0x42, 0x37, 0x3A, 0x00, 0x40, 0x3D, 0x02, 0x28, 0x00 };
        var ns = ChunkedMessage.Create2(data);
    }
    [Test]
    public void ParseBackward()
    {
        //https://mpn.live.nicovideo.jp/data/backward/v4/BBz6Sr
        var data = TestHelper.GetSampleDataBytes("BBz6Sr.bin");
        var a = ProtobufParser.Parse(data);
        {
            var a0 = ProtobufParser.Parse(((LengthDelimited)(a[0].Value)).Bytes);
            var a00 = ProtobufParser.Parse(((LengthDelimited)(a0[0].Value)).Bytes);

            var a000 = Encoding.UTF8.GetString(((LengthDelimited)(a00[0].Value)).Bytes);
            var a001 = ProtobufParser.Parse(((LengthDelimited)(a00[1].Value)).Bytes);
            var a0010_val = ((Varint)a001[0].Value).Value;
            var a0011_val = ((Varint)a001[1].Value).Value;
            var a002 = ProtobufParser.Parse(((LengthDelimited)(a00[2].Value)).Bytes);
            var a0020 = ProtobufParser.Parse(((LengthDelimited)(a002[0].Value)).Bytes);
            var a0020_val = ((Varint)a0020[0].Value).Value;
        }
        {
            var a0 = ProtobufParser.Parse(((LengthDelimited)(a[1].Value)).Bytes);
            var a00 = ProtobufParser.Parse(((LengthDelimited)(a0[0].Value)).Bytes);

            var a000 = Encoding.UTF8.GetString(((LengthDelimited)(a00[0].Value)).Bytes);
            var a001 = ProtobufParser.Parse(((LengthDelimited)(a00[1].Value)).Bytes);
            var a0010_val = ((Varint)a001[0].Value).Value;
            var a0011_val = ((Varint)a001[1].Value).Value;
            var a002 = ProtobufParser.Parse(((LengthDelimited)(a00[2].Value)).Bytes);
            var a0020 = ProtobufParser.Parse(((LengthDelimited)(a002[0].Value)).Bytes);
            var a0020_val = ((Varint)a0020[0].Value).Value;
        }
    }
    [Test]
    public void ParseSegment()
    {
        //https://mpn.live.nicovideo.jp/data/segment/v4/BBzHRK..
        var data = TestHelper.GetSampleDataBytes("BBzHRK.bin");
        var ns = ChunkedMessage.Create2(data);
    }
    [Test]
    public void ParseKKK()
    {
        //https://mpn.live.nicovideo.jp/api/view/v4/BBzyWM6-jOyibvcQfXn9HBaJ3TVWbbdjy95f_XiQH_OoN2xB2_sxZnB9c3iIC4pCAB3XkIN22JbfDsigvh4?at=now
        var data = new byte[] { 0x08, 0x22, 0x06, 0x08, 0x80, 0xBE, 0xA2, 0xB6, 0x06 };
        var a = ChunkedEntry.Create(data);
        Assert.That(a[0].Next!.At, Is.EqualTo(1724423936));
    }
    [Test]
    public void ParseChunkedMessage()
    {
        //https://mpn.live.nicovideo.jp/api/view/v4/BBwRnYbqI_Z5CT7bP4YV2EyR8TSRFzmMfL1E-rWDGaKRlYgzmjdMo8BHoz7dMqLSSRf68PTnHis?at=1724766926
        var data = TestHelper.GetSampleDataBytes("api_view_v4_at1724766926.bin");
        var a = ProtobufParser.Parse(data);
        var list = new List<ChunkedMessage>();
        foreach (var b in a)
        {
            var chunkedMessage = ChunkedMessage.Create(((LengthDelimited)b.Value).Bytes);
            list.Add(chunkedMessage);
        }
    }
    [Test]
    public void Abcdd()
    {
        //https://mpn.live.nicovideo.jp/data/segment/v4/BBx5pXmnYmZmyL54Y0t8hVaNQQ2CF0aJDp7OcHuTHfWnXLGHniFiP5aCifPHmEOcpe9pv5pF_WF0RtVU
        //entry.segment
        var data = new byte[] { 0xDF, 0x01, 0x0A, 0x3E, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6C, 0x4F, 0x65, 0x39, 0x36, 0x37, 0x71, 0x4A, 0x65, 0x52, 0x41, 0x52, 0x46, 0x4D, 0x77, 0x58, 0x35, 0x2D, 0x44, 0x67, 0x36, 0x67, 0x6E, 0x42, 0x43, 0x79, 0x6E, 0x72, 0x63, 0x53, 0x12, 0x0C, 0x08, 0xBF, 0x85, 0xBB, 0xB6, 0x06, 0x10, 0x80, 0xF8, 0xBE, 0xD8, 0x01, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xE6, 0xB4, 0xE9, 0xA4, 0x01, 0x12, 0x9C, 0x01, 0x0A, 0x99, 0x01, 0x0A, 0x78, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0xE3, 0x82, 0xAB, 0xE3, 0x83, 0x81, 0x18, 0xD5, 0x83, 0x0C, 0x20, 0x01, 0x32, 0x12, 0x61, 0x3A, 0x53, 0x44, 0x66, 0x5A, 0x5A, 0x31, 0x4F, 0x4D, 0x53, 0x37, 0x37, 0x78, 0x75, 0x5A, 0x56, 0x77, 0x3A, 0x00, 0x40, 0x95, 0x02, 0x93, 0x01, 0x0A, 0x3E, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6B, 0x4E, 0x65, 0x66, 0x6E, 0x49, 0x71, 0x4A, 0x65, 0x52, 0x41, 0x52, 0x45, 0x35, 0x67, 0x53, 0x79, 0x73, 0x35, 0x30, 0x55, 0x42, 0x6B, 0x68, 0x43, 0x79, 0x6E, 0x72, 0x63, 0x53, 0x12, 0x0C, 0x08, 0xC2, 0x85, 0xBB, 0xB6, 0x06, 0x10, 0xD8, 0x98, 0xE9, 0x81, 0x03, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xE6, 0xB4, 0xE9, 0xA4, 0x01, 0x12, 0x51, 0x0A, 0x4F, 0x0A, 0x30, 0x4E, 0x43, 0x56, 0x5F, 0x53, 0x65, 0x74, 0x75, 0x70, 0x5F, 0x32, 0x32, 0x33, 0x5F, 0x78, 0x36, 0x34, 0x2E, 0x6D, 0x73, 0x69, 0xE3, 0x80, 0x80, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x8C, 0xE3, 0x82, 0x92, 0xE6, 0x8A, 0xBC, 0xE3, 0x81, 0x97, 0xE3, 0x81, 0x9F, 0xE3, 0x81, 0xAE, 0xEF, 0xBC, 0x9F, 0x18, 0xED, 0x8D, 0x0C, 0x32, 0x12, 0x61, 0x3A, 0x73, 0x58, 0x68, 0x61, 0x68, 0x36, 0x38, 0x32, 0x76, 0x38, 0x68, 0x65, 0x53, 0x48, 0x52, 0x5F, 0x3A, 0x00, 0x40, 0x96, 0x02, 0x85, 0x01, 0x0A, 0x3D, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6C, 0x4A, 0x66, 0x4A, 0x6A, 0x4B, 0x71, 0x4A, 0x65, 0x52, 0x41, 0x52, 0x45, 0x45, 0x38, 0x48, 0x6C, 0x5F, 0x36, 0x4D, 0x70, 0x6C, 0x76, 0x78, 0x43, 0x79, 0x6E, 0x72, 0x63, 0x53, 0x12, 0x0B, 0x08, 0xC3, 0x85, 0xBB, 0xB6, 0x06, 0x10, 0x90, 0xE1, 0x86, 0x6B, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xE6, 0xB4, 0xE9, 0xA4, 0x01, 0x12, 0x44, 0x0A, 0x42, 0x0A, 0x21, 0xE4, 0xB8, 0x80, 0xE8, 0x88, 0xAC, 0xE7, 0x9A, 0x84, 0xE3, 0x81, 0xAB, 0xE3, 0x81, 0xA3, 0xE3, 0x81, 0xA6, 0xE3, 0x81, 0xAA, 0xE3, 0x82, 0x93, 0xE3, 0x82, 0x84, 0xE3, 0x81, 0xAD, 0xE3, 0x82, 0x93, 0x18, 0xB5, 0x8E, 0x0C, 0x20, 0x01, 0x32, 0x12, 0x61, 0x3A, 0x63, 0x64, 0x6A, 0x34, 0x58, 0x77, 0x52, 0x71, 0x46, 0x78, 0x4D, 0x70, 0x6A, 0x58, 0x78, 0x56, 0x3A, 0x00, 0x40, 0x97, 0x02, 0xAE, 0x01, 0x0A, 0x3E, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6B, 0x59, 0x66, 0x68, 0x37, 0x63, 0x71, 0x4A, 0x65, 0x52, 0x41, 0x52, 0x48, 0x4A, 0x43, 0x62, 0x78, 0x5A, 0x53, 0x41, 0x71, 0x33, 0x6F, 0x68, 0x43, 0x79, 0x6E, 0x72, 0x63, 0x53, 0x12, 0x0C, 0x08, 0xC7, 0x85, 0xBB, 0xB6, 0x06, 0x10, 0xE0, 0xE3, 0xED, 0xD2, 0x02, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xE6, 0xB4, 0xE9, 0xA4, 0x01, 0x12, 0x6C, 0x0A, 0x6A, 0x0A, 0x4B, 0xE3, 0x81, 0x9D, 0xE3, 0x82, 0x8C, 0xE3, 0x81, 0xAF, 0xE3, 0x83, 0x80, 0xE3, 0x82, 0xA6, 0xE3, 0x83, 0xB3, 0xE3, 0x83, 0xAD, 0xE3, 0x83, 0xBC, 0xE3, 0x83, 0x89, 0xE5, 0x9B, 0x9E, 0xE6, 0x95, 0xB0, 0xE3, 0x81, 0x8C, 0xE5, 0xB0, 0x91, 0xE3, 0x81, 0xAA, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0xA8, 0xE8, 0xA1, 0xA8, 0xE7, 0xA4, 0xBA, 0xE3, 0x81, 0x95, 0xE3, 0x82, 0x8C, 0xE3, 0x82, 0x8B, 0xE3, 0x82, 0x84, 0xE3, 0x81, 0xA4, 0xE3, 0x81, 0x8B, 0xE3, 0x81, 0xAA, 0x18, 0x8B, 0x8E, 0x0C, 0x32, 0x12, 0x61, 0x3A, 0x6B, 0x34, 0x6B, 0x49, 0x6B, 0x62, 0x37, 0x62, 0x44, 0x73, 0x67, 0x51, 0x48, 0x30, 0x51, 0x31, 0x3A, 0x00, 0x40, 0x98, 0x02, 0x72, 0x0A, 0x3E, 0x0A, 0x24, 0x45, 0x68, 0x6B, 0x4B, 0x45, 0x67, 0x6C, 0x46, 0x66, 0x66, 0x76, 0x72, 0x71, 0x4A, 0x65, 0x52, 0x41, 0x52, 0x48, 0x64, 0x5F, 0x59, 0x7A, 0x70, 0x78, 0x30, 0x6B, 0x53, 0x71, 0x52, 0x43, 0x79, 0x6E, 0x72, 0x63, 0x53, 0x12, 0x0C, 0x08, 0xCB, 0x85, 0xBB, 0xB6, 0x06, 0x10, 0x90, 0xE7, 0xE3, 0xEF, 0x02, 0x1A, 0x08, 0x0A, 0x06, 0x08, 0xE6, 0xB4, 0xE9, 0xA4, 0x01, 0x12, 0x30, 0x0A, 0x2E, 0x0A, 0x0F, 0xE3, 0x81, 0xBE, 0xE3, 0x81, 0x81, 0xE5, 0xA4, 0xA7, 0xE4, 0xB8, 0x88, 0xE5, 0xA4, 0xAB, 0x18, 0xA3, 0x91, 0x0C, 0x32, 0x12, 0x61, 0x3A, 0x6B, 0x34, 0x6B, 0x49, 0x6B, 0x62, 0x37, 0x62, 0x44, 0x73, 0x67, 0x51, 0x48, 0x30, 0x51, 0x31, 0x3A, 0x00, 0x40, 0x99, 0x02, 0x02, 0x28, 0x00 };
        var ns = ChunkedMessage.Create2(data);
        foreach (var n in ns)
        {
        }
    }
    [Test]
    public void CreateNicoliveStateTest()
    {
        var data = new byte[] { 0x4A, 0x02, 0x08, 0x01 };
        var a = NicoliveState.Create(data);

    }
    [Test]
    public void ParseMarqueeTest()
    {
        var data = new byte[] { 0x22, 0x33, 0x0A, 0x31, 0x0A, 0x2B, 0x0A, 0x29, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2F, 0x73, 0x6D, 0x34, 0x33, 0x38, 0x31, 0x38, 0x32, 0x35, 0x32, 0x1A, 0x02, 0x08, 0x0F };
        var a = NicoliveState.Create(data);

    }
    [Test]
    public void ParseModifierTest()
    {
        var data = new byte[] { 0x22, 0x09, 0x08, 0xC0, 0x01, 0x10, 0xC0, 0x01, 0x18, 0xC0, 0x01, 0x28, 0x02 };
        var a = Modifier.Create(data);

    }
    [Test]
    public void ParseGiftTest()
    {
        var data = new byte[] { 0x42, 0x28, 0x0A, 0x06, 0x6E, 0x69, 0x63, 0x6F, 0x72, 0x75, 0x10, 0xE4, 0xAA, 0x8D, 0x2E, 0x1A, 0x0A, 0xE3, 0x81, 0x82, 0xE3, 0x81, 0x9A, 0x4D, 0x4F, 0x4D, 0x4F, 0x20, 0x32, 0x32, 0x09, 0xE3, 0x83, 0x8B, 0xE3, 0x82, 0xB3, 0xE3, 0x82, 0x8B, 0x38, 0x04 };
        var a = NicoliveMessage.Create(data);

    }
    [Test]
    public void Parr()
    {
        var data = new byte[] { 0x0A, 0x0F, 0xE8, 0x90, 0xBD, 0xE3, 0x81, 0xA1, 0xE7, 0x9D, 0x80, 0xE3, 0x81, 0x91, 0xE3, 0x82, 0x88, 0x12, 0x00, 0x18, 0xC1, 0xCA, 0x81, 0x01, 0x32, 0x12, 0x61, 0x3A, 0x62, 0x56, 0x2D, 0x36, 0x37, 0x6E, 0x67, 0x35, 0x6B, 0x45, 0x71, 0x44, 0x6A, 0x76, 0x58, 0x6E, 0x3A, 0x02, 0x30, 0x01, 0x40, 0xE1, 0xE6, 0x0E };
        var a = Chat.Create(data);

    }
    [Test]
    public void ParseTagUpdatedTest()
    {
        var data = new byte[] { 0x8A, 0x01, 0xF3, 0x01, 0x0A, 0x3F, 0x0A, 0x08, 0x48, 0x44, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x2F, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x48, 0x44, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x8F, 0x01, 0x0A, 0x1B, 0xE3, 0x82, 0xB9, 0xE3, 0x83, 0x9E, 0xE3, 0x83, 0xBC, 0xE3, 0x83, 0x88, 0xE3, 0x83, 0x95, 0xE3, 0x82, 0xA9, 0xE3, 0x83, 0xB3, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x6C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x42, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x45, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x38, 0x38, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x35, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x33, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x14, 0x0A, 0x12, 0xE5, 0xA4, 0xAA, 0xE9, 0x99, 0xBD, 0xE3, 0x82, 0xB7, 0xE3, 0x82, 0xB9, 0xE3, 0x83, 0x86, 0xE3, 0x83, 0xA0, 0x0A, 0x08, 0x0A, 0x06, 0xE6, 0xAE, 0x8B, 0xE6, 0x9A, 0x91 };
        var a = NicoliveMessage.Create(data);

    }
    [Test]
    public void ParseTagUpdatedTest2()
    {
        var data = new byte[] { 0x0A, 0x3F, 0x0A, 0x08, 0x48, 0x44, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x2F, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x48, 0x44, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x8F, 0x01, 0x0A, 0x1B, 0xE3, 0x82, 0xB9, 0xE3, 0x83, 0x9E, 0xE3, 0x83, 0xBC, 0xE3, 0x83, 0x88, 0xE3, 0x83, 0x95, 0xE3, 0x82, 0xA9, 0xE3, 0x83, 0xB3, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x6C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x42, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x45, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x38, 0x38, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x35, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x33, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x81, 0x01, 0x0A, 0x18, 0xE3, 0x82, 0xB7, 0xE3, 0x83, 0xAB, 0xE3, 0x83, 0x90, 0xE3, 0x83, 0xBC, 0xE3, 0x82, 0xA6, 0xE3, 0x82, 0xA4, 0xE3, 0x83, 0xBC, 0xE3, 0x82, 0xAF, 0x10, 0x01, 0x22, 0x63, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x42, 0x37, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x41, 0x42, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x30, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x36, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x34, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x46 };
        var a = TagUpdated.Create(data);
    }
    [Test]
    public void ParseTagUpdatedTest3()
    {
        var data = new byte[] { 0x0A, 0x53, 0x0A, 0x0C, 0xE4, 0xB8, 0x80, 0xE8, 0x88, 0xAC, 0xE4, 0xBC, 0x9A, 0xE5, 0x93, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x3F, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x34, 0x25, 0x42, 0x38, 0x25, 0x38, 0x30, 0x25, 0x45, 0x38, 0x25, 0x38, 0x38, 0x25, 0x41, 0x43, 0x25, 0x45, 0x34, 0x25, 0x42, 0x43, 0x25, 0x39, 0x41, 0x25, 0x45, 0x35, 0x25, 0x39, 0x33, 0x25, 0x41, 0x31, 0x0A, 0x3F, 0x0A, 0x08, 0x48, 0x44, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x2F, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x48, 0x44, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x8F, 0x01, 0x0A, 0x1B, 0xE3, 0x82, 0xB9, 0xE3, 0x83, 0x9E, 0xE3, 0x83, 0xBC, 0xE3, 0x83, 0x88, 0xE3, 0x83, 0x95, 0xE3, 0x82, 0xA9, 0xE3, 0x83, 0xB3, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x18, 0x01, 0x22, 0x6C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x42, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x45, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x38, 0x38, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x35, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x39, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x33, 0x25, 0x45, 0x39, 0x25, 0x38, 0x35, 0x25, 0x38, 0x44, 0x25, 0x45, 0x34, 0x25, 0x42, 0x46, 0x25, 0x41, 0x31, 0x0A, 0x10, 0x0A, 0x0C, 0xE9, 0x9B, 0x91, 0xE8, 0xAB, 0x87, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0x10, 0x01, 0x0A, 0x13, 0x0A, 0x0F, 0xE5, 0xA5, 0xB3, 0xE6, 0x80, 0xA7, 0xE9, 0x85, 0x8D, 0xE4, 0xBF, 0xA1, 0xE8, 0x80, 0x85, 0x10, 0x01, 0x0A, 0x81, 0x01, 0x0A, 0x18, 0xE3, 0x82, 0xB7, 0xE3, 0x83, 0xAB, 0xE3, 0x83, 0x90, 0xE3, 0x83, 0xBC, 0xE3, 0x82, 0xA6, 0xE3, 0x82, 0xA4, 0xE3, 0x83, 0xBC, 0xE3, 0x82, 0xAF, 0x10, 0x01, 0x22, 0x63, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x42, 0x37, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x41, 0x42, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x39, 0x30, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x36, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x34, 0x25, 0x45, 0x33, 0x25, 0x38, 0x33, 0x25, 0x42, 0x43, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x41, 0x46, 0x0A, 0x29, 0x0A, 0x27, 0xE7, 0xA7, 0x8B, 0xE5, 0x88, 0x86, 0xE3, 0x81, 0xAE, 0xE6, 0x97, 0xA5, 0xEF, 0xBC, 0x88, 0xE3, 0x81, 0x97, 0xE3, 0x82, 0x85, 0xE3, 0x82, 0x93, 0xE3, 0x81, 0xB6, 0xE3, 0x82, 0x93, 0xE3, 0x81, 0xAE, 0xE3, 0x81, 0xB2, 0xEF, 0xBC, 0x89, 0x0A, 0x43, 0x0A, 0x09, 0xE3, 0x81, 0xBE, 0xE3, 0x81, 0x81, 0xE3, 0x82, 0x8B, 0x22, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x6C, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x31, 0x25, 0x42, 0x45, 0x25, 0x45, 0x33, 0x25, 0x38, 0x31, 0x25, 0x38, 0x31, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x38, 0x42, 0x0A, 0x4F, 0x0A, 0x0C, 0xE3, 0x81, 0x8B, 0xE3, 0x82, 0x8F, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0x84, 0x22, 0x3F, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x69, 0x63, 0x2E, 0x6E, 0x69, 0x63, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x2E, 0x6A, 0x70, 0x2F, 0x61, 0x2F, 0x25, 0x45, 0x33, 0x25, 0x38, 0x31, 0x25, 0x38, 0x42, 0x25, 0x45, 0x33, 0x25, 0x38, 0x32, 0x25, 0x38, 0x46, 0x25, 0x45, 0x33, 0x25, 0x38, 0x31, 0x25, 0x38, 0x34, 0x25, 0x45, 0x33, 0x25, 0x38, 0x31, 0x25, 0x38, 0x34, 0x0A, 0x0E, 0x0A, 0x0C, 0xE3, 0x81, 0xBE, 0xE3, 0x83, 0xBC, 0xE3, 0x81, 0xBF, 0xE3, 0x83, 0xBC, 0x0A, 0x1A, 0x0A, 0x18, 0xE3, 0x82, 0xBB, 0xE3, 0x82, 0xAF, 0xE3, 0x82, 0xB7, 0xE3, 0x83, 0xBC, 0xE3, 0x81, 0x8A, 0xE5, 0xA7, 0x89, 0xE3, 0x81, 0x95, 0xE3, 0x82, 0x93 };
        var a = TagUpdated.Create(data);

    }
}
